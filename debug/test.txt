我准备前端用next.js app router （clerk管理登陆）, 后端用cloudflare woker, 写一个全栈的AI搜索引擎。业务流程如下：用户查询 | v 后端API接收查询 | v 意图识别LLM (返回JSON) | v 路由函数 | +-> 如果是类别1或2: 直接LLM回答 | +-> 如果是类别3: 返回缓存的XXXprofile | +-> 如果是类别4: | +-> 快速RAG (前10条记录) | | | v | 返回快速答案给用户 | +-> 完整RAG (详细搜索和处理) | v 生成XXXprofile | v Reflection和可能的重写 | v 异步返回给用户并缓存 . 目前我的持久化和数据存储设计：前端准备用zustand store管理全局状态，用clerk管理登陆状态，前端next.js直接用页面调用worker，不写api或者只写简单的转发api. 后端worker直接用prisma和D1 adapter去映射和调用D1来存储用户，搜索历史和深度RAG结果（XXXprofile）。然后用cloudflare KV来维护worker的状态，比如管理快速RAG和深度RAG的进程. 安全性方面，我准备用clerk的登陆鉴权和中间件来对worker的api进行路由守卫，同时在worker添加速率限制和CROS同源策略，再加上一个cloudflare的点一下才能进入网页的防机器人功能，这样可以挡住90%的攻击。另外我考虑如何处理长时间运行的完整RAG过程，实际上我认为即便是快速RAG也是需要时间去完成的，所以我觉得无论是快速RAG还是深度RAG，可能都需要流式传输才行。比如可以把两个RAG设定为一个流程，用流式传输的管道，它可以将RAG处理的中间结果实时传送到前端。前端实时更新展示处理进度和部分结果。同时，后端继续完成完整的处理，生成XXXprofile并进行reflection。 作为一个产品原型来讲，我设计了这样的数据结构，



// Models for D1
type User = {
  id: string;
  email?: string;
  name?: string;
  createdAt: Date;
  updatedAt: Date;
  queries?: string; // query ids, convert the array to string before saving and parse it when reading
};

type Query = {
  id: string;
  userId: string;
  content: string;
  intentCategory: "DIRECT_LLM_ANSWER" | "CACHED_PROFILE" | "QUICK_RAG" | "FULL_RAG";
  createdAt: Date;
  searchResults: string; // search result ids, convert the array to string before saving and parse it when reading
  ragResultId?: string;
  deepRAGProfileId?: string;
};

type SearchResult = {
  id: string;
  queryId: string;
  type: "text" | "image" | "video";
  content: string; // text or img/video url
  metadata?: string // metadata for the search result. convert the json to string before saving and parse it when reading
  createdAt: Date;
};

type RAGResult = {
  id: string;
  queryId: string;
  content: string;
  isQuickRAG: boolean;
  createdAt: Date;
  updatedAt: Date;
};

type DeepRAGProfile = {
  id: string;
  queryId: string;
  content: string;
  reflection: string | null;
  createdAt: Date;
  updatedAt: Date;
};


// RAGProcess Model (for KV)
type RAGProcess = {
  id: string;
  queryId: string;
  status: "pending" | "completed" | "failed" | "quick RAG" | "full RAG";
  createdAt: Date;
  updatedAt: Date;
};
然后我也写好了schema.prisma, 并且做了迁移，然后通过npx prisma generate 创建了prisma client, 


https://backend-worker.bkchcnbj570.workers.dev/


const IntentRecognition_Prompt =
```
  \n# Your Role: 你是一个搜索意图识别专家，专注于识别用户自然语言背后的真实搜索意图和搜索需求，并精心完成以下几步工作： \n## Your jobs \n### job A: 意图识别: 深入分析用户的自然语言输入，精确提取其中的主要要素和核心需求，分析用户的当前意图是属于以下哪一类：日常聊天类(分类为1)、简单事实类(分类为2)、较复杂问题或可能需要近期信息才能准确回答的问题(分类为3). \n### job B: 将用户的自然语言分拆成几个角度的搜索内容: \n如果在job A中识别到用户的搜索意图是第三类,即较复杂问题或可能需要近期信息才能准确回答的问题，则你需要识别其中的主要要素及领会用户的搜索背后的需求，并且据此将用户的问题拆分成三个不同角度的搜索问题，以便后续从搜索引擎中得到多方面的翔实、深入的内容。拆分的问题所用的语种需要和用户输入的自然语言的语种一致. \n### job C：对job A中得出的结果，即用户的当前意图是属于哪一类的结论，你需要评估自己判断的置信度，并给出一个从0到1之间的置信度分数, 以便后续程序判断是否采信. \n### job D：将以上全部工作成功汇总到一个json格式的字符串中输出. \n## 输出的json schema：\n 
  {
    "intent_category": "1" | "2" | "3",
    "sub_questions": ["question1", "question2", "question3"],
    "confidence_score": 0.0 to 1.0
  }
```

const ROLEPLAY_INITSETUP =
  "# You are an experienced prompt enhancement expert, specializing in expanding users' simple natural language prompts into detailed, vivid character profiles and dialogue scenarios rich in detail, in order to provide comprehensive dialogue basis for subsequent role-playing interactions with users. \n ## If the user's initial prompt is not in English, you need to first translate it into English, then expand and enhance it. You expand the given prompt using rich, descriptive, detailed language. \n ## Deeply analyze the user's natural language input, precisely extract key elements and core meanings, and analyze the deep psychological needs behind the user's prompts. Based on this, carefully expand details and create character and scene documents.\n ## For characters, focus on basic information, physical characteristics, social relationships, work situation, psychological analysis, and other relevant information.For scenes, focus on time, place, people, environment, furnishings, objects, special details, character positions, postures, weather conditions, lighting conditions, atmosphere or mood, etc.\n ## Reply example (format): \n '1. Character name: ... \n 2. Character age: ... \n 3. Character gender: ... \n 4. Character address or place of birth: ... \n 5. Character height and weight: ... \n 6. Character facial features: ... \n 7. Character special marks (such as scars, tattoos, etc.): ... \n 8. Other body features character: ... \n 9. Character family members: ... \n 10. Character profession: ... \n 11. Character social circle: ... \n 12. Character past experiences: ... \n 13. Character current life status: ... \n 14. Character future plans: ... \n 15. Which of the nine personality types the character belongs to: ... \n 16. Character's psychological characteristics \n 17. Character's catchphrase: ... \n 18. Character's attire:... \n 19. Character's makeup:... \n 20. Character's accessories:... \n 21. Character's special likes and dislikes: ... \n 22. Character's daily habits: ... \n 23. Time of the scene: ... \n 24. Location of the scene: ... \n 25. Environment of the scene: ... \n 26. Furnishings in the scene: ... \n 27. Objects in the scene: ... \n 28. Special details in the scene: ... \n 29. Character positions and postures: ... \n 30. Weather conditions: ... \n 31. Lighting conditions: ... \n 32. Atmosphere or mood: ... \n 33. Other relevant information about the scene: ...'\n";

const FOOTER_SETUP =
  "\n\n# It's assistant's turn to reply. Remember,your reply needs to follow these criteria:\n1. You only need to send reply for this round of conversation.\n2. Acting out the character and scene base on the previous document,your reply should always align with the personality type and psychological characteristics of the character described in the previous document.\n3. Do not use third-person narration, but always give a detailed, imaginative response in the first person.\n4. Your reply must actively advance the scenario and dialogue. Don't be passive or always wait for the user's next instruction.\n\n";


https://github.com/codingJourneyFromUnemployment/aichatbot/blob/main/services/dataService.ts

https://claude.ai/chat/85961879-d619-4fef-aad9-14cb02d0126d

https://claude.ai/chat/ad7e8328-0876-46e3-ab49-ed85767db56e

https://dash.cloudflare.com/583088c232daa9a823dbbc787df7e6fe/workers-and-pages

https://developers.cloudflare.com/workers/tutorials/build-a-jamstack-app#render-data-from-kv

https://developers.cloudflare.com/d1/tutorials/d1-and-prisma-orm

https://hono.dev/docs/api/context


.dev.vars

# OPENROUTER_MODEL="cognitivecomputations/dolphin-mixtral-8x22b"
OPENROUTER_MODEL="openai/gpt-4o-2024-08-06"
OPENROUTER_API_KEY=""
SERPER_API_KEY=""